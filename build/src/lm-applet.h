/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include <gnome.h>
#include <panel-applet.h>
#include "lm-host.h"

#ifndef __LM_APPLET_H__
#define __LM_APPLET_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define LM_TYPE_APPLET	(lm_applet_get_type())
#define LM_APPLET(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_applet_get_type(), LMApplet)
#define LM_APPLET_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_applet_get_type(), LMApplet const)
#define LM_APPLET_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), lm_applet_get_type(), LMAppletClass)
#define LM_IS_APPLET(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), lm_applet_get_type ())

#define LM_APPLET_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), lm_applet_get_type(), LMAppletClass)

/* Private structure type */
typedef struct _LMAppletPrivate LMAppletPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_LM_APPLET__
#define __TYPEDEF_LM_APPLET__
typedef struct _LMApplet LMApplet;
#endif
struct _LMApplet {
	PanelApplet __parent__;
	/*< public >*/
	GPtrArray * hosts;
	int delay;
	int scale;
	int tooltip_graph_span;
	int preferences_width;
	int preferences_height;
	/*< private >*/
	LMAppletPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _LMAppletClass LMAppletClass;
struct _LMAppletClass {
	PanelAppletClass __parent__;
	/*signal*/void (* activate) (LMApplet * self);
	/*signal*/void (* activate_preferences) (LMApplet * self);
};


/*
 * Public methods
 */
GType	lm_applet_get_type	(void);
#line 84 "src/lm-applet.gob"
gint 	lm_applet_get_delay	(LMApplet * self);
#line 71 "lm-applet.h"
#line 80 "src/lm-applet.gob"
void 	lm_applet_set_delay	(LMApplet * self,
					gint val);
#line 75 "lm-applet.h"
#line 95 "src/lm-applet.gob"
gint 	lm_applet_get_scale	(LMApplet * self);
#line 78 "lm-applet.h"
#line 91 "src/lm-applet.gob"
void 	lm_applet_set_scale	(LMApplet * self,
					gint val);
#line 82 "lm-applet.h"
#line 106 "src/lm-applet.gob"
gint 	lm_applet_get_tooltip_graph_span	(LMApplet * self);
#line 85 "lm-applet.h"
#line 102 "src/lm-applet.gob"
void 	lm_applet_set_tooltip_graph_span	(LMApplet * self,
					gint val);
#line 89 "lm-applet.h"
#line 117 "src/lm-applet.gob"
gint 	lm_applet_get_preferences_width	(LMApplet * self);
#line 92 "lm-applet.h"
#line 113 "src/lm-applet.gob"
void 	lm_applet_set_preferences_width	(LMApplet * self,
					gint val);
#line 96 "lm-applet.h"
#line 128 "src/lm-applet.gob"
gint 	lm_applet_get_preferences_height	(LMApplet * self);
#line 99 "lm-applet.h"
#line 124 "src/lm-applet.gob"
void 	lm_applet_set_preferences_height	(LMApplet * self,
					gint val);
#line 103 "lm-applet.h"
#line 572 "src/lm-applet.gob"
int 	lm_applet_factory_main	(void);
#line 106 "lm-applet.h"
#line 662 "src/lm-applet.gob"
void 	lm_applet_add_host	(LMApplet * self,
					LMHostFrontend * host);
#line 110 "lm-applet.h"
#line 669 "src/lm-applet.gob"
void 	lm_applet_replace_host	(LMApplet * self,
					LMHostFrontend * old,
					LMHostFrontend * new);
#line 115 "lm-applet.h"
#line 678 "src/lm-applet.gob"
void 	lm_applet_reorder_hosts	(LMApplet * self,
					GSList * new_hosts);
#line 119 "lm-applet.h"
#line 685 "src/lm-applet.gob"
void 	lm_applet_remove_host	(LMApplet * self,
					LMHostFrontend * host);
#line 123 "lm-applet.h"
#line 692 "src/lm-applet.gob"
void 	lm_applet_get_host_color	(LMApplet * self,
					const char * name,
					GdkColor * color);
#line 128 "lm-applet.h"

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define lm_applet_connect__activate(object,func,data)	g_signal_connect(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate",(GCallback) __extension__ ({void (* ___activate) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate; }), (data))
#define lm_applet_connect_after__activate(object,func,data)	g_signal_connect_after(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate",(GCallback) __extension__ ({void (* ___activate) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate; }), (data))
#define lm_applet_connect_data__activate(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate",(GCallback) __extension__ ({void (* ___activate) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate; }), (data), (destroy_data), (GConnectFlags)(flags))
#define lm_applet_connect__activate_preferences(object,func,data)	g_signal_connect(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate_preferences",(GCallback) __extension__ ({void (* ___activate_preferences) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate_preferences; }), (data))
#define lm_applet_connect_after__activate_preferences(object,func,data)	g_signal_connect_after(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate_preferences",(GCallback) __extension__ ({void (* ___activate_preferences) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate_preferences; }), (data))
#define lm_applet_connect_data__activate_preferences(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_APPLET(__extension__ ({LMApplet *___object = (object); ___object; })),"activate_preferences",(GCallback) __extension__ ({void (* ___activate_preferences) (LMApplet * ___fake___self, gpointer ___data ) = (func); ___activate_preferences; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define lm_applet_connect__activate(object,func,data)	g_signal_connect(LM_APPLET(object),"activate",(GCallback)(func),(data))
#define lm_applet_connect_after__activate(object,func,data)	g_signal_connect_after(LM_APPLET(object),"activate",(GCallback)(func),(data))
#define lm_applet_connect_data__activate(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_APPLET(object),"activate",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define lm_applet_connect__activate_preferences(object,func,data)	g_signal_connect(LM_APPLET(object),"activate_preferences",(GCallback)(func),(data))
#define lm_applet_connect_after__activate_preferences(object,func,data)	g_signal_connect_after(LM_APPLET(object),"activate_preferences",(GCallback)(func),(data))
#define lm_applet_connect_data__activate_preferences(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_APPLET(object),"activate_preferences",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define LM_APPLET_PROP_DELAY(arg)    	"delay", __extension__ ({gint z = (arg); z;})
#define LM_APPLET_GET_PROP_DELAY(arg)	"delay", __extension__ ({gint *z = (arg); z;})
#define LM_APPLET_PROP_SCALE(arg)    	"scale", __extension__ ({gint z = (arg); z;})
#define LM_APPLET_GET_PROP_SCALE(arg)	"scale", __extension__ ({gint *z = (arg); z;})
#define LM_APPLET_PROP_TOOLTIP_GRAPH_SPAN(arg)    	"tooltip_graph_span", __extension__ ({gint z = (arg); z;})
#define LM_APPLET_GET_PROP_TOOLTIP_GRAPH_SPAN(arg)	"tooltip_graph_span", __extension__ ({gint *z = (arg); z;})
#define LM_APPLET_PROP_PREFERENCES_WIDTH(arg)    	"preferences_width", __extension__ ({gint z = (arg); z;})
#define LM_APPLET_GET_PROP_PREFERENCES_WIDTH(arg)	"preferences_width", __extension__ ({gint *z = (arg); z;})
#define LM_APPLET_PROP_PREFERENCES_HEIGHT(arg)    	"preferences_height", __extension__ ({gint z = (arg); z;})
#define LM_APPLET_GET_PROP_PREFERENCES_HEIGHT(arg)	"preferences_height", __extension__ ({gint *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define LM_APPLET_PROP_DELAY(arg)    	"delay",(gint )(arg)
#define LM_APPLET_GET_PROP_DELAY(arg)	"delay",(gint *)(arg)
#define LM_APPLET_PROP_SCALE(arg)    	"scale",(gint )(arg)
#define LM_APPLET_GET_PROP_SCALE(arg)	"scale",(gint *)(arg)
#define LM_APPLET_PROP_TOOLTIP_GRAPH_SPAN(arg)    	"tooltip_graph_span",(gint )(arg)
#define LM_APPLET_GET_PROP_TOOLTIP_GRAPH_SPAN(arg)	"tooltip_graph_span",(gint *)(arg)
#define LM_APPLET_PROP_PREFERENCES_WIDTH(arg)    	"preferences_width",(gint )(arg)
#define LM_APPLET_GET_PROP_PREFERENCES_WIDTH(arg)	"preferences_width",(gint *)(arg)
#define LM_APPLET_PROP_PREFERENCES_HEIGHT(arg)    	"preferences_height",(gint )(arg)
#define LM_APPLET_GET_PROP_PREFERENCES_HEIGHT(arg)	"preferences_height",(gint *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
