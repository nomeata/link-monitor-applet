/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include <gtk/gtk.h>

#ifndef __LM_CELL_RENDERER_COLOR_H__
#define __LM_CELL_RENDERER_COLOR_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define LM_TYPE_CELL_RENDERER_COLOR	(lm_cell_renderer_color_get_type())
#define LM_CELL_RENDERER_COLOR(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_cell_renderer_color_get_type(), LMCellRendererColor)
#define LM_CELL_RENDERER_COLOR_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_cell_renderer_color_get_type(), LMCellRendererColor const)
#define LM_CELL_RENDERER_COLOR_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), lm_cell_renderer_color_get_type(), LMCellRendererColorClass)
#define LM_IS_CELL_RENDERER_COLOR(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), lm_cell_renderer_color_get_type ())

#define LM_CELL_RENDERER_COLOR_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), lm_cell_renderer_color_get_type(), LMCellRendererColorClass)

/* Private structure type */
typedef struct _LMCellRendererColorPrivate LMCellRendererColorPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_LM_CELL_RENDERER_COLOR__
#define __TYPEDEF_LM_CELL_RENDERER_COLOR__
typedef struct _LMCellRendererColor LMCellRendererColor;
#endif
struct _LMCellRendererColor {
	GtkCellRenderer __parent__;
	/*< private >*/
	LMCellRendererColorPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _LMCellRendererColorClass LMCellRendererColorClass;
struct _LMCellRendererColorClass {
	GtkCellRendererClass __parent__;
	/*signal*/void (* activated) (LMCellRendererColor * self, const char * path);
};


/*
 * Public methods
 */
GType	lm_cell_renderer_color_get_type	(void);
#line 201 "src/lm-cell-renderer-color.gob"
GtkCellRenderer * 	lm_cell_renderer_color_new	(void);
#line 61 "lm-cell-renderer-color.h"

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define lm_cell_renderer_color_connect__activated(object,func,data)	g_signal_connect(LM_CELL_RENDERER_COLOR(__extension__ ({LMCellRendererColor *___object = (object); ___object; })),"activated",(GCallback) __extension__ ({void (* ___activated) (LMCellRendererColor * ___fake___self, const char * ___fake___path, gpointer ___data ) = (func); ___activated; }), (data))
#define lm_cell_renderer_color_connect_after__activated(object,func,data)	g_signal_connect_after(LM_CELL_RENDERER_COLOR(__extension__ ({LMCellRendererColor *___object = (object); ___object; })),"activated",(GCallback) __extension__ ({void (* ___activated) (LMCellRendererColor * ___fake___self, const char * ___fake___path, gpointer ___data ) = (func); ___activated; }), (data))
#define lm_cell_renderer_color_connect_data__activated(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_CELL_RENDERER_COLOR(__extension__ ({LMCellRendererColor *___object = (object); ___object; })),"activated",(GCallback) __extension__ ({void (* ___activated) (LMCellRendererColor * ___fake___self, const char * ___fake___path, gpointer ___data ) = (func); ___activated; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define lm_cell_renderer_color_connect__activated(object,func,data)	g_signal_connect(LM_CELL_RENDERER_COLOR(object),"activated",(GCallback)(func),(data))
#define lm_cell_renderer_color_connect_after__activated(object,func,data)	g_signal_connect_after(LM_CELL_RENDERER_COLOR(object),"activated",(GCallback)(func),(data))
#define lm_cell_renderer_color_connect_data__activated(object,func,data,destroy_data,flags)	g_signal_connect_data(LM_CELL_RENDERER_COLOR(object),"activated",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define LM_CELL_RENDERER_COLOR_PROP_COLOR(arg)    	"color", __extension__ ({gpointer z = (arg); z;})
#define LM_CELL_RENDERER_COLOR_GET_PROP_COLOR(arg)	"color", __extension__ ({gpointer *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define LM_CELL_RENDERER_COLOR_PROP_COLOR(arg)    	"color",(gpointer )(arg)
#define LM_CELL_RENDERER_COLOR_GET_PROP_COLOR(arg)	"color",(gpointer *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
