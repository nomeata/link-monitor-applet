/* Generated by GOB (v2.0.15)   (do not edit directly) */

#ifndef __LM_HOST_PRIVATE_H__
#define __LM_HOST_PRIVATE_H__

#include "lm-host.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#line 24 "src/lm-host.gob"

#include <stdint.h>

typedef struct
{
  LMTimeSpan	sent_time;
} RequestInfo;

/*
 * We use multiple error levels to avoid UI flicker. For instance, if
 * a single global error was used and ICMP error messages were
 * continually received, the global error would quickly alternate
 * between NULL (after an echo request is successfully sent) and the
 * ICMP error received a couple of milliseconds later.
 *
 * Note that error levels must be kept sorted by decreasing priority.
 */
typedef enum
{
  ERROR_RESOLVE,
  ERROR_SEND,
  ERROR_RECEIVE,

  NUM_ERRORS
} Error;

#line 41 "lm-host-private.h"
struct _LMHostPrivate {
#line 78 "src/lm-host.gob"
	struct addrinfo * addrinfo;
#line 79 "src/lm-host.gob"
	const LMSocket * sock;
#line 87 "src/lm-host.gob"
	int host_id;
#line 89 "src/lm-host.gob"
	RequestInfo requests[256];
#line 90 "src/lm-host.gob"
	uint8_t sent_seq;
#line 95 "src/lm-host.gob"
	unsigned int resolve_timeout_id;
#line 96 "src/lm-host.gob"
	unsigned int send_timeout_id;
#line 97 "src/lm-host.gob"
	unsigned int dead_timeout_id;
#line 99 "src/lm-host.gob"
	LMTimeSpan max_roundtrip_time;
#line 125 "src/lm-host.gob"
	char * errors[NUM_ERRORS];
#line 63 "lm-host-private.h"
};

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
