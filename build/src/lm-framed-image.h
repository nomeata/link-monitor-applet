/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include <gtk/gtk.h>

#ifndef __LM_FRAMED_IMAGE_H__
#define __LM_FRAMED_IMAGE_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define LM_TYPE_FRAMED_IMAGE	(lm_framed_image_get_type())
#define LM_FRAMED_IMAGE(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_framed_image_get_type(), LMFramedImage)
#define LM_FRAMED_IMAGE_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_framed_image_get_type(), LMFramedImage const)
#define LM_FRAMED_IMAGE_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), lm_framed_image_get_type(), LMFramedImageClass)
#define LM_IS_FRAMED_IMAGE(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), lm_framed_image_get_type ())

#define LM_FRAMED_IMAGE_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), lm_framed_image_get_type(), LMFramedImageClass)

/* Private structure type */
typedef struct _LMFramedImagePrivate LMFramedImagePrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_LM_FRAMED_IMAGE__
#define __TYPEDEF_LM_FRAMED_IMAGE__
typedef struct _LMFramedImage LMFramedImage;
#endif
struct _LMFramedImage {
	GtkWidget __parent__;
	/*< private >*/
	LMFramedImagePrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _LMFramedImageClass LMFramedImageClass;
struct _LMFramedImageClass {
	GtkWidgetClass __parent__;
};


/*
 * Public methods
 */
GType	lm_framed_image_get_type	(void);
#line 36 "src/lm-framed-image.gob"
void 	lm_framed_image_set_pixbuf	(LMFramedImage * self,
					GdkPixbuf * val);
#line 61 "lm-framed-image.h"
#line 100 "src/lm-framed-image.gob"
GtkWidget * 	lm_framed_image_new	(void);
#line 64 "lm-framed-image.h"

/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define LM_FRAMED_IMAGE_PROP_PIXBUF(arg)    	"pixbuf", __extension__ ({GdkPixbuf * z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define LM_FRAMED_IMAGE_PROP_PIXBUF(arg)    	"pixbuf",(GdkPixbuf * )(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
