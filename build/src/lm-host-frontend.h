/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include <gtk/gtk.h>
#include "lm-host.h"
#include "lm-applet.h"
#include "lm-data-set.h"

#ifndef __LM_HOST_FRONTEND_H__
#define __LM_HOST_FRONTEND_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



typedef struct
{
  char		*name;
  GdkColor	color;
} LMHostFrontendConfiguration;


/*
 * Type checking and casting macros
 */
#define LM_TYPE_HOST_FRONTEND	(lm_host_frontend_get_type())
#define LM_HOST_FRONTEND(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_host_frontend_get_type(), LMHostFrontend)
#define LM_HOST_FRONTEND_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_host_frontend_get_type(), LMHostFrontend const)
#define LM_HOST_FRONTEND_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), lm_host_frontend_get_type(), LMHostFrontendClass)
#define LM_IS_HOST_FRONTEND(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), lm_host_frontend_get_type ())

#define LM_HOST_FRONTEND_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), lm_host_frontend_get_type(), LMHostFrontendClass)

/* Private structure type */
typedef struct _LMHostFrontendPrivate LMHostFrontendPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_LM_HOST_FRONTEND__
#define __TYPEDEF_LM_HOST_FRONTEND__
typedef struct _LMHostFrontend LMHostFrontend;
#endif
struct _LMHostFrontend {
	LMHost __parent__;
	/*< public >*/
	GdkColor color;
	LMDataSet * data_set;
	GtkWidget * tooltip_flag;
	GtkWidget * tooltip_status;
	/*< private >*/
	LMHostFrontendPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _LMHostFrontendClass LMHostFrontendClass;
struct _LMHostFrontendClass {
	LMHostClass __parent__;
};


/*
 * Public methods
 */
GType	lm_host_frontend_get_type	(void);
#line 64 "src/lm-host-frontend.gob"
const GdkColor * 	lm_host_frontend_get_color	(LMHostFrontend * self);
#line 76 "lm-host-frontend.h"
#line 60 "src/lm-host-frontend.gob"
void 	lm_host_frontend_set_color	(LMHostFrontend * self,
					const GdkColor * val);
#line 80 "lm-host-frontend.h"
#line 69 "src/lm-host-frontend.gob"
gchar * 	lm_host_frontend_get_country_name	(LMHostFrontend * self);
#line 83 "lm-host-frontend.h"
#line 69 "src/lm-host-frontend.gob"
void 	lm_host_frontend_set_country_name	(LMHostFrontend * self,
					gchar * val);
#line 87 "lm-host-frontend.h"
#line 328 "src/lm-host-frontend.gob"
LMHostFrontend * 	lm_host_frontend_new	(LMApplet * applet,
					const char * name,
					const GdkColor * color);
#line 92 "lm-host-frontend.h"
#line 347 "src/lm-host-frontend.gob"
LMHostFrontend * 	lm_host_frontend_new_from_configuration	(LMApplet * applet,
					LMHostFrontendConfiguration * config);
#line 96 "lm-host-frontend.h"
#line 354 "src/lm-host-frontend.gob"
LMHostFrontendConfiguration * 	lm_host_frontend_get_configuration	(LMHostFrontend * self);
#line 99 "lm-host-frontend.h"
#line 366 "src/lm-host-frontend.gob"
void 	lm_host_frontend_configuration_free	(LMHostFrontendConfiguration * config);
#line 102 "lm-host-frontend.h"
#line 373 "src/lm-host-frontend.gob"
char * 	lm_host_frontend_build_gconf_entry	(LMHostFrontend * self);
#line 105 "lm-host-frontend.h"
#line 402 "src/lm-host-frontend.gob"
LMHostFrontend * 	lm_host_frontend_parse_gconf_entry	(LMApplet * applet,
					const char * entry);
#line 109 "lm-host-frontend.h"

/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define LM_HOST_FRONTEND_PROP_COLOR(arg)    	"color", __extension__ ({const GdkColor * z = (arg); z;})
#define LM_HOST_FRONTEND_GET_PROP_COLOR(arg)	"color", __extension__ ({const GdkColor * *z = (arg); z;})
#define LM_HOST_FRONTEND_PROP_COUNTRY_NAME(arg)    	"country_name", __extension__ ({gchar *z = (arg); z;})
#define LM_HOST_FRONTEND_GET_PROP_COUNTRY_NAME(arg)	"country_name", __extension__ ({gchar **z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define LM_HOST_FRONTEND_PROP_COLOR(arg)    	"color",(const GdkColor * )(arg)
#define LM_HOST_FRONTEND_GET_PROP_COLOR(arg)	"color",(const GdkColor * *)(arg)
#define LM_HOST_FRONTEND_PROP_COUNTRY_NAME(arg)    	"country_name",(gchar *)(arg)
#define LM_HOST_FRONTEND_GET_PROP_COUNTRY_NAME(arg)	"country_name",(gchar **)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
