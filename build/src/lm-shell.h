/* Generated by GOB (v2.0.15)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>


#include <stdint.h>
#include "lm-tooltips.h"
#include "lm-decls.h"

#ifndef __LM_SHELL_H__
#define __LM_SHELL_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */



#define LM_MAX_HOSTS		256 /* host ID is an uint8_t */

typedef struct
{
  int		domain;		/* AF_INET, ... */
  int		desc;		/* descriptor, undefined if init_error is set */
  char		*init_error;	/* error message or NULL if no error */
} LMSocket;


/*
 * Type checking and casting macros
 */
#define LM_TYPE_SHELL	(lm_shell_get_type())
#define LM_SHELL(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_shell_get_type(), LMShell)
#define LM_SHELL_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), lm_shell_get_type(), LMShell const)
#define LM_SHELL_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), lm_shell_get_type(), LMShellClass)
#define LM_IS_SHELL(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), lm_shell_get_type ())

#define LM_SHELL_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), lm_shell_get_type(), LMShellClass)

/* Private structure type */
typedef struct _LMShellPrivate LMShellPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_LM_SHELL__
#define __TYPEDEF_LM_SHELL__
typedef struct _LMShell LMShell;
#endif
struct _LMShell {
	GObject __parent__;
	/*< public >*/
	uint16_t icmp_ident;
	GSList * applets;
	LMTooltips * tooltips;
	/*< private >*/
	LMShellPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _LMShellClass LMShellClass;
struct _LMShellClass {
	GObjectClass __parent__;
};


/*
 * Public methods
 */
GType	lm_shell_get_type	(void);
#line 69 "src/lm-shell.gob"
gint 	lm_shell_get_host_count	(LMShell * self);
#line 77 "lm-shell.h"
#line 152 "src/lm-shell.gob"
int 	lm_shell_allocate_host_id	(LMShell * self,
					LMHost * host);
#line 81 "lm-shell.h"
#line 169 "src/lm-shell.gob"
void 	lm_shell_deallocate_host_id	(LMShell * self,
					int host_id);
#line 85 "lm-shell.h"
#line 178 "src/lm-shell.gob"
const LMSocket * 	lm_shell_get_socket	(LMShell * self,
					int domain);
#line 89 "lm-shell.h"
#line 194 "src/lm-shell.gob"
LMShell * 	lm_shell_new	(GSList * sockets);
#line 92 "lm-shell.h"

/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define LM_SHELL_PROP_SOCKETS(arg)    	"sockets", __extension__ ({gpointer z = (arg); z;})
#define LM_SHELL_GET_PROP_SOCKETS(arg)	"sockets", __extension__ ({gpointer *z = (arg); z;})
#define LM_SHELL_GET_PROP_HOST_COUNT(arg)	"host_count", __extension__ ({gint *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define LM_SHELL_PROP_SOCKETS(arg)    	"sockets",(gpointer )(arg)
#define LM_SHELL_GET_PROP_SOCKETS(arg)	"sockets",(gpointer *)(arg)
#define LM_SHELL_GET_PROP_HOST_COUNT(arg)	"host_count",(gint *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */



extern LMShell *lm_shell;


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
