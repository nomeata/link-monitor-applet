/*
 * Link Monitor Applet
 * Copyright (C) 2004-2008 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%headertop{
#include <gtk/gtk.h>
#include "lm-host-frontend.h"
%}

%{
#define WIDTH		36
#define HEIGHT		24

#define XALIGN		0.5
#define YALIGN		0.5

#define LINE_WIDTH	3.0

typedef struct
{
  double x;
  double y;
} Point;

static const Point points[] = {
  { 0.1, 0.5 },
  { 0.2, 0.7 },
  { 0.4, 0.2 },
  { 0.5, 0.7 },
  { 0.7, 0.3 },
  { 0.9, 0.6 }
};
%}

class LM:Line:Graph:Icon from Gtk:Widget
{
  private LMHostFrontend *host;
  property POINTER host (link, flags = CONSTRUCT_ONLY);

  constructor (self)
  {
    GTK_WIDGET_SET_FLAGS(self, GTK_NO_WINDOW);

    lm_g_object_connect(self, selfp->host,
			"swapped-signal::notify::color", gtk_widget_queue_draw, self,
			NULL);
  }

  override (Gtk:Widget) void
    size_request (GtkWidget *widget, GtkRequisition *requisition)
  {
    requisition->width = WIDTH;
    requisition->height = HEIGHT;
  }

  /*
   * We don't use cairo transforms because they make it cumbersome to
   * specify an uniform line width with a deforming scale (see
   * http://cairographics.org/tutorial/).
   */
  private void
    get_absolute_point (self,
			const Point *in (check null),
			Point *out (check null))
  {
    GtkWidget *widget = GTK_WIDGET(self);

    out->x = widget->allocation.x
      + ((widget->allocation.width - widget->requisition.width) * XALIGN)
      + (in->x * widget->requisition.width);
    out->y = widget->allocation.y
      + ((widget->allocation.height - widget->requisition.height) * YALIGN)
      + (in->y * widget->requisition.height);
  }

  override (Gtk:Widget) gboolean
    expose_event (GtkWidget *widget, GdkEventExpose *event)
  {
    Self *self = SELF(widget);
    cairo_t *cr;
    Point p;
    int i;

    if (! GTK_WIDGET_DRAWABLE(widget))
      return FALSE;

    cr = gdk_cairo_create(widget->window);

    gdk_cairo_set_source_color(cr, &selfp->host->color);

    cairo_set_line_width(cr, LINE_WIDTH);
    cairo_set_line_cap(cr, CAIRO_LINE_CAP_BUTT);
    cairo_set_line_join(cr, CAIRO_LINE_JOIN_MITER);

    self_get_absolute_point(self, &points[0], &p);
    cairo_move_to(cr, p.x, p.y);

    for (i = 1; i < G_N_ELEMENTS(points); i++)
      {
	self_get_absolute_point(self, &points[i], &p);
	cairo_line_to(cr, p.x, p.y);
      }

    cairo_stroke(cr);

    cairo_destroy(cr);

    return FALSE;
  }

  public GtkWidget *
    new (LM:Host:Frontend *host (check null type))
  {
    return GTK_WIDGET(GET_NEW_VARG(LM_LINE_GRAPH_ICON_PROP_HOST(host), NULL));
  }
}
