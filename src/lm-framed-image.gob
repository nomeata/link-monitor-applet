/*
 * Link Monitor Applet
 * Copyright (C) 2004-2008 Jean-Yves Lefort <jylefort@brutele.be>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%headertop{
#include <gtk/gtk.h>
%}

%{
#include "lm-util.h"

#define XALIGN			0.5
#define YALIGN			0.5
%}

class LM:Framed:Image from Gtk:Widget
{
  private GdkPixbuf *pixbuf unrefwith g_object_unref;
  property OBJECT pixbuf (export, object_type = Gdk:Pixbuf, type = GdkPixbuf *)
    set
    {
      if (selfp->pixbuf)
	g_object_unref(selfp->pixbuf);

      selfp->pixbuf = g_value_dup_object(VAL);

      gtk_widget_queue_resize(GTK_WIDGET(self));
    };

  init (self)
  {
    gtk_widget_set_has_window(GTK_WIDGET(self), FALSE);    
  }

  private void
    size_request (GtkWidget *widget, GtkRequisition *requisition)
  {
    Self *self = SELF(widget);

    if (selfp->pixbuf)
      {
	requisition->width = gdk_pixbuf_get_width(selfp->pixbuf) + LM_BOX_BORDER_WIDTH * 2;
	requisition->height = gdk_pixbuf_get_height(selfp->pixbuf) + LM_BOX_BORDER_WIDTH * 2;
      }
    else
      {
	requisition->width = 0;
	requisition->height = 0;
      }
  }

  override (Gtk:Widget) void
    get_preferred_width (GtkWidget *widget, gint *minimal_width, gint *natural_width)
  {
    GtkRequisition requisition;

    self_size_request (widget, &requisition);

    *minimal_width = *natural_width = requisition.width;
  }

  override (Gtk:Widget) void
    get_preferred_height (GtkWidget *widget, gint *minimal_height, gint *natural_height)
  {
    GtkRequisition requisition;

    self_size_request (widget, &requisition);

    *minimal_height = *natural_height = requisition.height;
  }


  override (Gtk:Widget) gboolean
    draw (GtkWidget *widget, cairo_t *cr)
  {
    Self *self = SELF(widget);
    int x;
    int y;

    if (! selfp->pixbuf)
      return FALSE;

    lm_widget_get_origin(widget, XALIGN, YALIGN, &x, &y);

    gtk_render_frame(gtk_widget_get_style_context(widget),
		     cr,
		     x,
		     y,
		     gtk_widget_get_allocated_width(widget),
		     gtk_widget_get_allocated_height(widget));

    lm_paint_pixbuf(cr,
		    selfp->pixbuf,
		    x + LM_BOX_BORDER_WIDTH,
		    y + LM_BOX_BORDER_WIDTH);

    return FALSE;
  }

  public GtkWidget *
    new (void)
  {
    return GTK_WIDGET(GET_NEW);
  }
}
