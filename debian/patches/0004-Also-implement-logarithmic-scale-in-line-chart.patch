From 605a836ff0f06b66426149fd610f90457e951ed1 Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Fri, 16 Jul 2010 11:50:11 +0200
Subject: Also implement logarithmic scale in line chart

---
 src/lm-line-graph.gob |  145 +++++++++++++++++++++++++++++++++++++------------
 1 files changed, 111 insertions(+), 34 deletions(-)

diff --git a/src/lm-line-graph.gob b/src/lm-line-graph.gob
index afb7cef..57d54e8 100644
--- a/src/lm-line-graph.gob
+++ b/src/lm-line-graph.gob
@@ -46,9 +46,15 @@
 #define X_MINOR_SUBDIVISIONS		12
 #define X_LABELS			(X_MAJOR_SUBDIVISIONS + 1)
 
-#define Y_MAJOR_SUBDIVISIONS		5
-#define Y_MINOR_SUBDIVISIONS		10
-#define Y_LABELS			(Y_MAJOR_SUBDIVISIONS + 1)
+#define Y_MAJOR_SUBDIVISIONS_LINEAR	5
+#define Y_MINOR_SUBDIVISIONS_LINEAR	10
+#define Y_LABELS_LINEAR			(Y_MAJOR_SUBDIVISIONS_LINEAR + 1)
+
+#define Y_MAJOR_SUBDIVISIONS_LOGARITHMIC	4
+#define Y_MINOR_SUBDIVISIONS_LOGARITHMIC	8
+#define Y_LABELS_LOGARITHMIC			(Y_MAJOR_SUBDIVISIONS_LOGARITHMIC + 1)
+
+#define Y_LABELS_MAX			Y_LABELS_LINEAR
 
 typedef struct
 {
@@ -84,7 +90,7 @@ class LM:Line:Graph from Gtk:Widget
   private unsigned int update_not_done_timeout_id;
 
   private LabelInfo x_labels[X_LABELS];
-  private LabelInfo y_labels[Y_LABELS];
+  private LabelInfo y_labels[Y_LABELS_MAX];
 
   /* total widget size */
   private int width;
@@ -179,7 +185,14 @@ class LM:Line:Graph from Gtk:Widget
       return;
 
     self_clear_labels_real(self, selfp->x_labels, X_LABELS);
-    self_clear_labels_real(self, selfp->y_labels, Y_LABELS);
+    if (selfp->applet->logarithmic)
+      {
+	self_clear_labels_real(self, selfp->y_labels, Y_LABELS_LOGARITHMIC);
+      }
+    else
+      {
+	self_clear_labels_real(self, selfp->y_labels, Y_LABELS_LINEAR);
+      }
   }
 
   private void
@@ -254,26 +267,52 @@ class LM:Line:Graph from Gtk:Widget
 
     /* create vertical labels */
 
-    step = (double) selfp->applet->scale / Y_MAJOR_SUBDIVISIONS;
-
-    /* display a suitable number of decimals */
-    step_usec = selfp->applet->scale * 1000 / Y_MAJOR_SUBDIVISIONS;
-    if (step_usec % 1000 == 0)
-      y_precision = 0;
-    else if (step_usec % 100 == 0)
-      y_precision = 1;
-    else
-      y_precision = 2;
-
-    for (i = 0; i < Y_LABELS; i++)
+    if (selfp->applet->logarithmic)
       {
-	LabelInfo *info = &selfp->y_labels[i];
-	char *str;
+	for (i = 0; i < Y_LABELS_LOGARITHMIC; i++)
+	  {
+	    LabelInfo *info = &selfp->y_labels[i];
+	    char *str;
+
+	    step = (double) selfp->applet->scale * pow(10,-i);
+	    /* display a suitable number of decimals */
+	    step_usec = (double) selfp->applet->scale * 1000 * pow(10,-i);
+
+	    if (step_usec % 1000 == 0)
+	      y_precision = 0;
+	    else if (step_usec % 100 == 0)
+	      y_precision = 1;
+	    else
+	      y_precision = 2;
+
+	    str = g_strdup_printf(_("%.*f ms"), y_precision, step);
+	    info->layout = self_create_pango_layout(self, str, &y_label_width, &y_label_height);
+	    g_free(str);
+	  }
+	}
+      else
+      {
+	step = (double) selfp->applet->scale / Y_MAJOR_SUBDIVISIONS_LINEAR;
+
+	/* display a suitable number of decimals */
+	step_usec = selfp->applet->scale * 1000 / Y_MAJOR_SUBDIVISIONS_LINEAR;
+	if (step_usec % 1000 == 0)
+	  y_precision = 0;
+	else if (step_usec % 100 == 0)
+	  y_precision = 1;
+	else
+	  y_precision = 2;
 
-	str = g_strdup_printf(_("%.*f ms"), y_precision, step * (Y_MAJOR_SUBDIVISIONS - i));
-	info->layout = self_create_pango_layout(self, str, &y_label_width, &y_label_height);
-	g_free(str);
-      }
+	for (i = 0; i < Y_LABELS_LINEAR; i++)
+	  {
+	    LabelInfo *info = &selfp->y_labels[i];
+	    char *str;
+
+	    str = g_strdup_printf(_("%.*f ms"), y_precision, step * (Y_MAJOR_SUBDIVISIONS_LINEAR - i));
+	    info->layout = self_create_pango_layout(self, str, &y_label_width, &y_label_height);
+	    g_free(str);
+	  }
+	}
 
     /* compute margins, graph size and position */
 
@@ -306,17 +345,33 @@ class LM:Line:Graph from Gtk:Widget
 
     /* compute vertical labels positions */
 
-    step_pixels = LM_LINE_GRAPH_HEIGHT / Y_MAJOR_SUBDIVISIONS;
+    if (selfp->applet->logarithmic) {
+	step_pixels = LM_LINE_GRAPH_HEIGHT / Y_MAJOR_SUBDIVISIONS_LOGARITHMIC;
+
+	for (i = 0; i < Y_LABELS_LOGARITHMIC; i++)
+	  {
+	    LabelInfo *info = &selfp->y_labels[i];
+
+	    pango_layout_get_pixel_extents(info->layout, NULL, &rect);
 
-    for (i = 0; i < Y_LABELS; i++)
+	    info->x = selfp->graph_x - GRAPH_MARGIN - rect.width;
+	    info->y = selfp->graph_y + step_pixels * i - rect.height / 2;
+	  }
+      }	  
+    else
       {
-	LabelInfo *info = &selfp->y_labels[i];
+	step_pixels = LM_LINE_GRAPH_HEIGHT / Y_MAJOR_SUBDIVISIONS_LINEAR;
 
-	pango_layout_get_pixel_extents(info->layout, NULL, &rect);
+	for (i = 0; i < Y_LABELS_LINEAR; i++)
+	  {
+	    LabelInfo *info = &selfp->y_labels[i];
 
-	info->x = selfp->graph_x - GRAPH_MARGIN - rect.width;
-	info->y = selfp->graph_y + step_pixels * i - rect.height / 2;
-      }
+	    pango_layout_get_pixel_extents(info->layout, NULL, &rect);
+
+	    info->x = selfp->graph_x - GRAPH_MARGIN - rect.width;
+	    info->y = selfp->graph_y + step_pixels * i - rect.height / 2;
+	  }
+      }	  
 
     /* update the time labels when the second will change */
 
@@ -467,7 +522,14 @@ class LM:Line:Graph from Gtk:Widget
     draw_labels (self, GdkEventExpose *event, int x, int y)
   {
     self_draw_labels_real(self, selfp->x_labels, X_LABELS, event, x, y);
-    self_draw_labels_real(self, selfp->y_labels, Y_LABELS, event, x, y);
+    if (selfp->applet->logarithmic)
+      {
+	self_draw_labels_real(self, selfp->y_labels, Y_LABELS_LOGARITHMIC, event, x, y);
+      }
+    else
+      {
+	self_draw_labels_real(self, selfp->y_labels, Y_LABELS_LINEAR, event, x, y);
+      }
   }
 
   private void
@@ -555,8 +617,16 @@ class LM:Line:Graph from Gtk:Widget
 
     /* vertical */
 
-    minor_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MINOR_SUBDIVISIONS;
-    major_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MAJOR_SUBDIVISIONS;
+    if (selfp->applet->logarithmic)
+      {
+	minor_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MINOR_SUBDIVISIONS_LOGARITHMIC; 
+	major_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MAJOR_SUBDIVISIONS_LOGARITHMIC;
+      }
+    else
+      {
+	minor_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MINOR_SUBDIVISIONS_LINEAR; 
+	major_subdivision = LM_LINE_GRAPH_AREA_HEIGHT / Y_MAJOR_SUBDIVISIONS_LINEAR;
+      }
 
     line_end = graph_area_x + LM_LINE_GRAPH_AREA_WIDTH - 1;
     graph_end = graph_area_y + LM_LINE_GRAPH_AREA_HEIGHT;
@@ -613,7 +683,14 @@ class LM:Line:Graph from Gtk:Widget
 	age = now - dp->timestamp;
 
 	x = (double) (span - age) / span * LM_LINE_GRAPH_AREA_WIDTH;
-	y = (double) LM_LINE_GRAPH_AREA_HEIGHT - ((double) dp->roundtrip_time / scale * LM_LINE_GRAPH_AREA_HEIGHT);
+	if (selfp->applet->logarithmic)
+	  {
+	    y = (double) LM_LINE_GRAPH_AREA_HEIGHT - (log10((double) dp->roundtrip_time / scale) + 4)/4 * LM_LINE_GRAPH_AREA_HEIGHT;
+	  }
+        else
+	  {
+	    y = (double) LM_LINE_GRAPH_AREA_HEIGHT - ((double) dp->roundtrip_time / scale * LM_LINE_GRAPH_AREA_HEIGHT);
+	  }
 
 	/*
 	 * Constrain high pings inside the graph, since no plot means
-- 
1.7.1

